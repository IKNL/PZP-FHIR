map "http://hl7.org/fhir/StructureMap/OccupationalData4to3" = "R4 to R3 Conversion for OccupationalData"

uses "http://hl7.org/fhir/StructureDefinition/OccupationalData" alias OccupationalData as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/OccupationalData" alias OccupationalDataR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group OccupationalData(source src : OccupationalDataR3, target tgt : OccupationalData) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.recorder as vs -> tgt.recorder as vt then string(vs, vt);
  src.informant as vs -> tgt.informant as vt then string(vs, vt);
  src.employmentStatus as s -> tgt.employmentStatus as t then OccupationalDataEmploymentStatus(s, t);
  src.retirementDate as vs -> tgt.retirementDate as vt then string(vs, vt);
  src.combatZonePeriod as vs -> tgt.combatZonePeriod as vt then string(vs, vt);
  src.usualWork as s -> tgt.usualWork as t then OccupationalDataUsualWork(s, t);
  src.pastOrPresentJob as s -> tgt.pastOrPresentJob as t then OccupationalDataPastOrPresentJob(s, t);
}

group OccupationalDataEmploymentStatus(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.effective as vs -> tgt.effective as vt then dateTime(vs, vt);
}

group OccupationalDataUsualWork(source src, target tgt) extends BackboneElement {
  src.occupation as vs -> tgt.occupation as vt then string(vs, vt);
  src.industry as vs -> tgt.industry as vt then string(vs, vt);
  src.start as vs -> tgt.start as vt then dateTime(vs, vt);
  src.duration as vs -> tgt.duration as vt then string(vs, vt);
}

group OccupationalDataPastOrPresentJob(source src, target tgt) extends BackboneElement {
  src.occupation as vs -> tgt.occupation as vt then string(vs, vt);
  src.industry as vs -> tgt.industry as vt then string(vs, vt);
  src.effective as vs -> tgt.effective as vt then dateTime(vs, vt);
  src.employer as vs -> tgt.employer as vt then string(vs, vt);
  src.workClassification as vs -> tgt.workClassification as vt then string(vs, vt);
  src.supervisoryLevel as vs -> tgt.supervisoryLevel as vt then string(vs, vt);
  src.jobDuty as vs -> tgt.jobDuty as vt then string(vs, vt);
  src.occupationalHazard as vs -> tgt.occupationalHazard as vt then string(vs, vt);
  src.workSchedule as s -> tgt.workSchedule as t then OccupationalDataPastOrPresentJobWorkSchedule(s, t);
}

group OccupationalDataPastOrPresentJobWorkSchedule(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.weeklyWorkDays as vs -> tgt.weeklyWorkDays as vt then string(vs, vt);
  src.dailyWorkHours as vs -> tgt.dailyWorkHours as vt then string(vs, vt);
}

