map "http://hl7.org/fhir/StructureMap/NutritionOrder4to3" = "R4 to R3 Conversion for NutritionOrder"

uses "http://hl7.org/fhir/StructureDefinition/NutritionOrder" alias NutritionOrder as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/NutritionOrder" alias NutritionOrderR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group NutritionOrder(source src : NutritionOrderR3, target tgt : NutritionOrder) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.patient as vs -> tgt.patient as vt then string(vs, vt);
  src.encounter as vs -> tgt.encounter as vt then Reference(vs, vt);
  src.dateTime as vs -> tgt.dateTime as vt then string(vs, vt);
  src.orderer as vs -> tgt.orderer as vt then string(vs, vt);
  src.allergyIntolerance as vs -> tgt.allergyIntolerance as vt then string(vs, vt);
  src.foodPreferenceModifier as vs -> tgt.foodPreferenceModifier as vt then string(vs, vt);
  src.excludeFoodModifier as vs -> tgt.excludeFoodModifier as vt then string(vs, vt);
  src.oralDiet as s -> tgt.oralDiet as t then oralDiet(s, t);
  src.supplement as s -> tgt.supplement as t then supplement(s, t);
  src.enteralFormula as s -> tgt.enteralFormula as t then enteralFormula(s, t);
}

group oralDiet(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.schedule as vs -> tgt.schedule as vt then string(vs, vt);
  src.nutrient as s -> tgt.nutrient as t then nutrient(s, t);
  src.texture as s -> tgt.texture as t then texture(s, t);
  src.fluidConsistencyType as vs -> tgt.fluidConsistencyType as vt then string(vs, vt);
  src.instruction as vs -> tgt.instruction as vt then string(vs, vt);
}

group nutrient(source src, target tgt) extends BackboneElement {
  src.modifier as vs -> tgt.modifier as vt then string(vs, vt);
  src.amount as vs -> tgt.amount as vt then string(vs, vt);
}

group texture(source src, target tgt) extends BackboneElement {
  src.modifier as vs -> tgt.modifier as vt then string(vs, vt);
  src.foodType as vs -> tgt.foodType as vt then string(vs, vt);
}

group supplement(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.productName as vs -> tgt.productName as vt then string(vs, vt);
  src.schedule as vs -> tgt.schedule as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.instruction as vs -> tgt.instruction as vt then string(vs, vt);
}

group enteralFormula(source src, target tgt) extends BackboneElement {
  src.baseFormulaType as vs -> tgt.baseFormulaType as vt then string(vs, vt);
  src.baseFormulaProductName as vs -> tgt.baseFormulaProductName as vt then string(vs, vt);
  src.additiveType as vs -> tgt.additiveType as vt then string(vs, vt);
  src.additiveProductName as vs -> tgt.additiveProductName as vt then string(vs, vt);
  src.caloricDensity as vs -> tgt.caloricDensity as vt then string(vs, vt);
  src.routeofAdministration as vs -> tgt.routeofAdministration as vt then string(vs, vt);
  src.administration as s -> tgt.administration as t then administration(s, t);
  src.maxVolumeToDeliver as vs -> tgt.maxVolumeToDeliver as vt then string(vs, vt);
  src.administrationInstruction as vs -> tgt.administrationInstruction as vt then string(vs, vt);
}

group administration(source src, target tgt) extends BackboneElement {
  src.schedule as vs -> tgt.schedule as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.rate : Quantity as vs -> tgt.rate = create('Quantity') as vt then Quantity(vs, vt);
  src.rate : Ratio as vs -> tgt.rate = create('Ratio') as vt then Ratio(vs, vt);
}

