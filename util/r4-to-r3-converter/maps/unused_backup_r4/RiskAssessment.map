map "http://hl7.org/fhir/StructureMap/RiskAssessment4to3" = "R4 to R3 Conversion for RiskAssessment"

uses "http://hl7.org/fhir/StructureDefinition/RiskAssessment" alias RiskAssessment as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/RiskAssessment" alias RiskAssessmentR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group RiskAssessment(source src : RiskAssessment, target tgt : RiskAssessmentR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.basedOn as vs -> tgt.basedOn as vt then string(vs, vt);
  src.parent as vs -> tgt.parent as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.method as vs -> tgt.method as vt then CodeableConcept(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.encounter -> tgt.context;
  src.occurrence : dateTime as vs -> tgt.occurrence = create('dateTime') as vt then dateTime(vs, vt);
  src.occurrence : Period as vs -> tgt.occurrence = create('Period') as vt then Period(vs, vt);
  src.condition as vs -> tgt.condition as vt then string(vs, vt);
  src.performer as vs -> tgt.performer as vt then Reference(vs, vt);
  src.reasonCode as vs -> tgt.reason = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.reasonReference as vs -> tgt.reason = create('Reference') as vt then Reference(vs, vt);
  src.basis as vs -> tgt.basis as vt then string(vs, vt);
  src.prediction as vs0 -> tgt.prediction as vt0 then prediction(vs0, vt0);
  src.mitigation as vs -> tgt.mitigation as vt then string(vs, vt);
  src.note as n then {
    n.text -> tgt.comment;
  };
}

group prediction(source src, target tgt) extends BackboneElement {
  src.outcome as vs -> tgt.outcome as vt then string(vs, vt);
  src.probability : decimal as vs -> tgt.probability = create('decimal') as vt then decimal(vs, vt);
  src.probability : Range as vs -> tgt.probability = create('Range') as vt then Range(vs, vt);
  src.qualitativeRisk as vs -> tgt.qualitativeRisk as vt then string(vs, vt);
  src.relativeRisk as vs -> tgt.relativeRisk as vt then string(vs, vt);
  src.when : Period as vs -> tgt.when = create('Period') as vt then Period(vs, vt);
  src.when : Range as vs -> tgt.when = create('Range') as vt then Range(vs, vt);
  src.rationale as vs -> tgt.rationale as vt then string(vs, vt);
}

