map "http://hl7.org/fhir/StructureMap/Group4to3" = "R4 to R3 Conversion for Group"

uses "http://hl7.org/fhir/StructureDefinition/Group" alias Group as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Group" alias GroupR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Group(source src : Group, target tgt : GroupR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.active as vs -> tgt.active as vt then boolean(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.actual as vs -> tgt.actual as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.characteristic as vs0 -> tgt.characteristic as vt0 then characteristic(vs0, vt0);
  src.member as vs0 -> tgt.member as vt0 then member(vs0, vt0);
}

group characteristic(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.value : CodeableConcept as vs -> tgt.value = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.value : boolean as vs -> tgt.value = create('boolean') as vt then boolean(vs, vt);
  src.value : Quantity as vs -> tgt.value = create('Quantity') as vt then Quantity(vs, vt);
  src.value : Range as vs -> tgt.value = create('Range') as vt then Range(vs, vt);
  src.exclude as vs -> tgt.exclude as vt then string(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
}

group member(source src, target tgt) extends BackboneElement {
  src.period as vs -> tgt.period as vt then string(vs, vt);
  src.entity as vs -> tgt.entity as vt then string(vs, vt);
  src.inactive as vs -> tgt.inactive as vt then string(vs, vt);
}

