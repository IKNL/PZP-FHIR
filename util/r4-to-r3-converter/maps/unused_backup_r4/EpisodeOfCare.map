map "http://hl7.org/fhir/StructureMap/EpisodeOfCare4to3" = "R4 to R3 Conversion for EpisodeOfCare"

uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" alias EpisodeOfCare as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/EpisodeOfCare" alias EpisodeOfCareR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group EpisodeOfCare(source src : EpisodeOfCare, target tgt : EpisodeOfCareR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.statusHistory as vs0 -> tgt.statusHistory as vt0 then statusHistory(vs0, vt0);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.diagnosis as vs0 -> tgt.diagnosis as vt0 then diagnosis(vs0, vt0);
  src.patient as vs -> tgt.patient as vt then string(vs, vt);
  src.managingOrganization as vs -> tgt.managingOrganization as vt then Reference(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
  src.referralRequest as vs -> tgt.referralRequest as vt then string(vs, vt);
  src.careManager as vs -> tgt.careManager as vt then string(vs, vt);
  src.team as vs -> tgt.team as vt then string(vs, vt);
  src.account as vs -> tgt.account as vt then string(vs, vt);
}

group statusHistory(source src, target tgt) extends BackboneElement {
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
}

group diagnosis(source src, target tgt) extends BackboneElement {
  src.condition as vs -> tgt.condition as vt then string(vs, vt);
  src.role as vs -> tgt.role as vt then string(vs, vt);
  src.rank as vs -> tgt.rank as vt then string(vs, vt);
}

