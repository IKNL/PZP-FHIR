map "http://hl7.org/fhir/StructureMap/HealthcareService4to3" = "R4 to R3 Conversion for HealthcareService"

uses "http://hl7.org/fhir/StructureDefinition/HealthcareService" alias HealthcareService as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/HealthcareService" alias HealthcareServiceR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group HealthcareService(source src : HealthcareService, target tgt : HealthcareServiceR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.active as vs -> tgt.active as vt then boolean(vs, vt);
  src.providedBy as vs -> tgt.providedBy as vt then string(vs, vt);
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.specialty as vs -> tgt.specialty as vt then string(vs, vt);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.comment as vs -> tgt.comment as vt then string(vs, vt);
  src.extraDetails as vs -> tgt.extraDetails as vt then string(vs, vt);
  src.photo as vs -> tgt.photo as vt then Attachment(vs, vt);
  src.telecom as vs -> tgt.telecom as vt then ContactPoint(vs, vt);
  src.coverageArea as vs -> tgt.coverageArea as vt then string(vs, vt);
  src.serviceProvisionCode as vs -> tgt.serviceProvisionCode as vt then string(vs, vt);
  src.eligibility as vs -> tgt.eligibility as vt then eligibility(vs, vt, tgt);
  src.program as cc then {
    cc.text -> tgt.programName;
  };
  src.characteristic as vs -> tgt.characteristic as vt then string(vs, vt);
  src.referralMethod as vs -> tgt.referralMethod as vt then string(vs, vt);
  src.appointmentRequired as vs -> tgt.appointmentRequired as vt then string(vs, vt);
  src.availableTime as vs -> tgt.availableTime as vt then availableTime(vs, vt);
  src.notAvailable as vs -> tgt.notAvailable as vt then notAvailable(vs, vt);
  src.availabilityExceptions as vs -> tgt.availabilityExceptions as vt then string(vs, vt);
  src.endpoint as vs -> tgt.endpoint as vt then string(vs, vt);
}

group eligibility(source src, target tgt, target res) {
  src.code as vs then CodeableConcept(vs, tgt);
  src.comment -> res.eligibilityNote;
}

group availableTime(source src, target tgt) extends BackboneElement {
  src.daysOfWeek as vs -> tgt.daysOfWeek as vt then string(vs, vt);
  src.allDay as vs -> tgt.allDay as vt then string(vs, vt);
  src.availableStartTime as vs -> tgt.availableStartTime as vt then string(vs, vt);
  src.availableEndTime as vs -> tgt.availableEndTime as vt then string(vs, vt);
}

group notAvailable(source src, target tgt) extends BackboneElement {
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.during as vs -> tgt.during as vt then string(vs, vt);
}

