map "http://hl7.org/fhir/StructureMap/ActivityDefinition4to3" = "R4 to R3 Conversion for ActivityDefinition"

uses "http://hl7.org/fhir/StructureDefinition/ActivityDefinition" alias ActivityDefinition as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/ActivityDefinition" alias ActivityDefinitionR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group ActivityDefinition(source src : ActivityDefinitionR3, target tgt : ActivityDefinition) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.subtitle as vs -> tgt.subtitle as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.usage as vs -> tgt.usage as vt then string(vs, vt);
  src.copyright as vs -> tgt.copyright as vt then markdown(vs, vt);
  src.approvalDate as vs -> tgt.approvalDate as vt then string(vs, vt);
  src.lastReviewDate as vs -> tgt.lastReviewDate as vt then string(vs, vt);
  src.effectivePeriod as vs -> tgt.effectivePeriod as vt then string(vs, vt);
  src.topic as vs -> tgt.topic as vt then string(vs, vt);
  src.author as vs ->  tgt.contributor as vt,  vt.type = 'author' then Contributor(vs, vt);
  src.editor as vs ->  tgt.contributor as vt,  vt.type = 'editor' then Contributor(vs, vt);
  src.reviewer as vs ->  tgt.contributor as vt,  vt.type = 'reviewer' then Contributor(vs, vt);
  src.endorser as vs ->  tgt.contributor as vt,  vt.type = 'endorser' then Contributor(vs, vt);
  src.relatedArtifact as vs -> tgt.relatedArtifact as vt then string(vs, vt);
  src.library as vs -> tgt.library as vt then string(vs, vt);
  src.kind as v -> tgt.kind = translate(v, 'http://hl7.org/fhir/StructureMap/ConceptMaps4to3#ResourceTypeMap', 'code');
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.doNotPerform as vs -> tgt.doNotPerform as vt then string(vs, vt);
  src.timing as vs -> tgt.timing as vt then string(vs, vt);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.participant as s -> tgt.participant as t then ActivityDefinitionParticipant(s, t);
  src.product as vs -> tgt.product as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.dosage as vs -> tgt.dosage as vt then string(vs, vt);
  src.bodySite as vs -> tgt.bodySite as vt then CodeableConcept(vs, vt);
  src.specimenRequirement as vs -> tgt.specimenRequirement as vt then string(vs, vt);
  src.transform as vs -> tgt.transform as vt then string(vs, vt);
  src.dynamicValue as s -> tgt.dynamicValue as t then ActivityDefinitionDynamicValue(s, t);
}

group ActivityDefinitionParticipant(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.role as vs -> tgt.role as vt then string(vs, vt);
}

group ActivityDefinitionDynamicValue(source src, target tgt) extends BackboneElement {
  src.path as vs -> tgt.path as vt then string(vs, vt);
  src.expression as vs where vs.type.exists().not() -> tgt as vt then {
    vs.description -> vt.description;
    vs.language -> vt.language;
    vs.expression -> vt.expression;
  };
}

