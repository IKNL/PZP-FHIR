map "http://hl7.org/fhir/StructureMap/RequestGroup4to3" = "R4 to R3 Conversion for RequestGroup"

uses "http://hl7.org/fhir/StructureDefinition/RequestGroup" alias RequestGroup as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/RequestGroup" alias RequestGroupR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group RequestGroup(source src : RequestGroupR3, target tgt : RequestGroup) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.instantiatesCanonical -> tgt.definition;
  src.basedOn as vs -> tgt.basedOn as vt then string(vs, vt);
  src.replaces as vs -> tgt.replaces as vt then string(vs, vt);
  src.groupIdentifier as vs -> tgt.groupIdentifier as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.intent as vs -> tgt.intent as vt then string(vs, vt);
  src.priority as vs -> tgt.priority as vt then string(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.encounter -> tgt.context;
  src.authoredOn as vs -> tgt.authoredOn as vt then string(vs, vt);
  src.author as vs -> tgt.author as vt then string(vs, vt);
  src.reasonCode as vs -> tgt.reason = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.reasonReference as vs -> tgt.reason = create('Reference') as vt then Reference(vs, vt);
  src.note as vs -> tgt.note as vt then Annotation(vs, vt);
  src.action as vs -> tgt.action as vt then action(vs, vt);
}

group action(source src, target tgt) extends BackboneElement {
  src.prefix -> tgt.label;
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.textEquivalent as vs -> tgt.textEquivalent as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.condition as s -> tgt.condition as t then condition(s, t);
  src.relatedAction as s -> tgt.relatedAction as t then relatedAction(s, t);
  src.timing : dateTime as vs -> tgt.timing = create('dateTime') as vt then dateTime(vs, vt);
  src.timing : Period as vs -> tgt.timing = create('Period') as vt then Period(vs, vt);
  src.timing : Duration as vs -> tgt.timing = create('Duration') as vt then Duration(vs, vt);
  src.timing : Range as vs -> tgt.timing = create('Range') as vt then Range(vs, vt);
  src.timing : Timing as vs -> tgt.timing = create('Timing') as vt then Timing(vs, vt);
  src.participant as vs -> tgt.participant as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.groupingBehavior as vs -> tgt.groupingBehavior as vt then string(vs, vt);
  src.selectionBehavior as vs -> tgt.selectionBehavior as vt then string(vs, vt);
  src.requiredBehavior as vs -> tgt.requiredBehavior as vt then string(vs, vt);
  src.precheckBehavior as vs -> tgt.precheckBehavior as vt then string(vs, vt);
  src.cardinalityBehavior as vs -> tgt.cardinalityBehavior as vt then string(vs, vt);
  src.resource as vs -> tgt.resource as vt then string(vs, vt);
  src.action as vs -> tgt.action as vt then action(vs, vt);
}

group condition(source src, target tgt) extends BackboneElement {
  src.kind as vs -> tgt.kind as vt then string(vs, vt);
  src.expression as e then {
    e.description -> tgt.description;
    e.language -> tgt.language;
    e.expression -> tgt.expression;
  };
}

group relatedAction(source src, target tgt) extends BackboneElement {
  src.actionId as vs -> tgt.actionId as vt then string(vs, vt);
  src.relationship as vs -> tgt.relationship as vt then string(vs, vt);
  src.offset : Duration as vs -> tgt.offset = create('Duration') as vt then Duration(vs, vt);
  src.offset : Range as vs -> tgt.offset = create('Range') as vt then Range(vs, vt);
}

