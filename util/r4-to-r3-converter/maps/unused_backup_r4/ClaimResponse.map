map "http://hl7.org/fhir/StructureMap/ClaimResponse4to3" = "R4 to R3 Conversion for ClaimResponse"

uses "http://hl7.org/fhir/StructureDefinition/ClaimResponse" alias ClaimResponse as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/ClaimResponse" alias ClaimResponseR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group ClaimResponse(source src : ClaimResponseR3, target tgt : ClaimResponse) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.subType as vs -> tgt.subType as vt then string(vs, vt);
  src.use as vs -> tgt.use as vt then code(vs, vt);
  src.patient as vs -> tgt.patient as vt then string(vs, vt);
  src.created as vs -> tgt.created as vt then dateTime(vs, vt);
  src.insurer as vs -> tgt.insurer as vt then string(vs, vt);
  src.requestor -> tgt.requestProvider;
  src.request as vs -> tgt.request as vt then string(vs, vt);
  src.outcome as vs where value in ('complete' | 'error' | 'partial') ->  tgt.outcome as vt,  vt.coding as c,  c.system = 'http://hl7.org/fhir/remittance-outcome',  c.code = vs;
  src.disposition as vs -> tgt.disposition as vt then string(vs, vt);
  src.payeeType as vs -> tgt.payeeType as vt then string(vs, vt);
  src.item as s -> tgt.item as t then ClaimResponseItem(s, t);
  src.addItem as s -> tgt.addItem as t then ClaimResponseAddItem(s, t);
  src.error as s -> tgt.error as t then ClaimResponseError(s, t);
  src.total as total then {
    total.category as vs then {
      total.amount as va then {
        vs.coding as c where code = 'submitted' then {
          c -> tgt.totalCost as cost then Money(va, cost) "cost";
        };
      };
    };
  };
  src.total as total then {
    total.category as vs then {
      total.amount as va then {
        vs.coding as c where code = 'benefit' then {
          c -> tgt.totalBenefit as cost then Money(va, cost) "totalBenefit";
        };
      };
    };
  };
  src.payment as s -> tgt.payment as t then ClaimResponsePayment(s, t);
  src.fundsReserve as vs then {
    vs.coding -> tgt.reserved;
  };
  src.form as vs -> tgt.form as vt then string(vs, vt);
  src.processNote as s -> tgt.processNote as t then ClaimResponseProcessNote(s, t);
  src.communicationRequest as vs -> tgt.communicationRequest as vt then string(vs, vt);
  src.insurance as s -> tgt.insurance as t then ClaimResponseInsurance(s, t);
}

group ClaimResponseItem(source src, target tgt) extends BackboneElement {
  src.itemSequence -> tgt.sequenceLinkId;
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as s -> tgt.adjudication as t then ClaimResponseItemAdjudication(s, t);
  src.detail as s -> tgt.detail as t then ClaimResponseItemDetail(s, t);
}

group ClaimResponseItemAdjudication(source src, target tgt) extends BackboneElement {
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.reason as vs -> tgt.reason as vt then string(vs, vt);
  src.amount as vs -> tgt.amount as vt then string(vs, vt);
  src.value as vs -> tgt.value as vt then Quantity(vs, vt);
}

group ClaimResponseItemDetail(source src, target tgt) extends BackboneElement {
  src.detailSequence as vs -> tgt.detailSequence as vt then string(vs, vt);
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as vs -> tgt.adjudication as vt then string(vs, vt);
  src.subDetail as s -> tgt.subDetail as t then ClaimResponseItemDetailSubDetail(s, t);
}

group ClaimResponseItemDetailSubDetail(source src, target tgt) extends BackboneElement {
  src.subDetailSequence as vs -> tgt.subDetailSequence as vt then string(vs, vt);
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as vs -> tgt.adjudication as vt then string(vs, vt);
}

group ClaimResponseAddItem(source src, target tgt) extends BackboneElement {
  src.itemSequence as vs -> tgt.itemSequence as vt then string(vs, vt);
  src.detailSequence as vs -> tgt.detailSequence as vt then string(vs, vt);
  src.subdetailSequence as vs -> tgt.subdetailSequence as vt then string(vs, vt);
  src.service as vs -> tgt.service as vt then string(vs, vt);
  src.modifier as vs -> tgt.modifier as vt then string(vs, vt);
  src.programCode as vs -> tgt.programCode as vt then string(vs, vt);
  src.serviced as vs -> tgt.serviced as vt then string(vs, vt);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.unitPrice as vs -> tgt.unitPrice as vt then string(vs, vt);
  src.factor as vs -> tgt.factor as vt then string(vs, vt);
  src.net as vs -> tgt.net as vt then string(vs, vt);
  src.bodySite as vs -> tgt.bodySite as vt then CodeableConcept(vs, vt);
  src.subSite as vs -> tgt.subSite as vt then string(vs, vt);
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as vs -> tgt.adjudication as vt then string(vs, vt);
  src.detail as s -> tgt.detail as t then ClaimResponseAddItemDetail(s, t);
}

group ClaimResponseAddItemDetail(source src, target tgt) extends BackboneElement {
  src.service as vs -> tgt.service as vt then string(vs, vt);
  src.modifier as vs -> tgt.modifier as vt then string(vs, vt);
  src.programCode as vs -> tgt.programCode as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.unitPrice as vs -> tgt.unitPrice as vt then string(vs, vt);
  src.factor as vs -> tgt.factor as vt then string(vs, vt);
  src.net as vs -> tgt.net as vt then string(vs, vt);
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as vs -> tgt.adjudication as vt then string(vs, vt);
  src.subDetail as s -> tgt.subDetail as t then ClaimResponseAddItemDetailSubDetail(s, t);
}

group ClaimResponseAddItemDetailSubDetail(source src, target tgt) extends BackboneElement {
  src.service as vs -> tgt.service as vt then string(vs, vt);
  src.modifier as vs -> tgt.modifier as vt then string(vs, vt);
  src.programCode as vs -> tgt.programCode as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.unitPrice as vs -> tgt.unitPrice as vt then string(vs, vt);
  src.factor as vs -> tgt.factor as vt then string(vs, vt);
  src.net as vs -> tgt.net as vt then string(vs, vt);
  src.noteNumber as vs -> tgt.noteNumber as vt then string(vs, vt);
  src.adjudication as vs -> tgt.adjudication as vt then string(vs, vt);
}

group ClaimResponseError(source src, target tgt) extends BackboneElement {
  src.itemSequence as vs -> tgt.itemSequence as vt then string(vs, vt);
  src.detailSequence as vs -> tgt.detailSequence as vt then string(vs, vt);
  src.subDetailSequence as vs -> tgt.subDetailSequence as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
}

group ClaimResponsePayment(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.adjustment as vs -> tgt.adjustment as vt then string(vs, vt);
  src.adjustmentReason as vs -> tgt.adjustmentReason as vt then string(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.amount as vs -> tgt.amount as vt then string(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
}

group ClaimResponseProcessNote(source src, target tgt) extends BackboneElement {
  src.number as vs -> tgt.number as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.text as vs -> tgt.text as vt then Narrative(vs, vt);
  src.language as vs -> tgt.language as vt then code(vs, vt);
}

group ClaimResponseInsurance(source src, target tgt) extends BackboneElement {
  src.sequence as vs -> tgt.sequence as vt then string(vs, vt);
  src.focal as vs -> tgt.focal as vt then string(vs, vt);
  src.coverage as vs -> tgt.coverage as vt then string(vs, vt);
  src.businessArrangement as vs -> tgt.businessArrangement as vt then string(vs, vt);
  src.preAuthRef as vs -> tgt.preAuthRef as vt then string(vs, vt);
  src.claimResponse as vs -> tgt.claimResponse as vt then string(vs, vt);
}

