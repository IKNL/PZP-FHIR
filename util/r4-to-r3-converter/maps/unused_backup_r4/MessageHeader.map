map "http://hl7.org/fhir/StructureMap/MessageHeader4to3" = "R4 to R3 Conversion for MessageHeader"

uses "http://hl7.org/fhir/StructureDefinition/MessageHeader" alias MessageHeader as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/MessageHeader" alias MessageHeaderR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group MessageHeader(source src : MessageHeader, target tgt : MessageHeaderR3) extends DomainResource <<type+>> {
  src.event as vs -> tgt.event as vt then string(vs, vt);
  src.destination as vs0 -> tgt.destination as vt0 then destination(vs0, vt0, tgt);
  src.sender as vs -> tgt.sender as vt then string(vs, vt);
  src.extension as ext where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MessageHeader.timestamp' then {
    ext.value -> tgt.timestamp "timestamp2";
  } "timestamp";
  src.enterer as vs -> tgt.enterer as vt then string(vs, vt);
  src.author as vs -> tgt.author as vt then string(vs, vt);
  src.source as vs0 -> tgt.source as vt0 then source(vs0, vt0);
  src.responsible as vs -> tgt.responsible as vt then string(vs, vt);
  src.reason as vs -> tgt.reason as vt then string(vs, vt);
  src.response as vs0 -> tgt.response as vt0 then response(vs0, vt0);
  src.focus as vs -> tgt.focus as vt then string(vs, vt);
}

group destination(source src, target tgt, target mtgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.target as vs -> tgt.target as vt then string(vs, vt);
  src.endpoint as vs -> tgt.endpoint as vt then string(vs, vt);
  src.receiver -> mtgt.receiver;
}

group source(source src, target tgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.software as vs -> tgt.software as vt then string(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.endpoint as vs -> tgt.endpoint as vt then string(vs, vt);
}

group response(source src, target tgt) extends BackboneElement {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.details as vs -> tgt.details as vt then string(vs, vt);
}

