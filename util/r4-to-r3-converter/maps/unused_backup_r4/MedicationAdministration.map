map "http://hl7.org/fhir/StructureMap/MedicationAdministration4to3" = "R4 to R3 Conversion for MedicationAdministration"

uses "http://hl7.org/fhir/StructureDefinition/MedicationAdministration" alias MedicationAdministration as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/MedicationAdministration" alias MedicationAdministrationR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group MedicationAdministration(source src : MedicationAdministrationR3, target tgt : MedicationAdministration) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.instantiates -> tgt.definition;
  src.partOf as vs -> tgt.partOf as vt then string(vs, vt);
  src where src.extension.where(url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MedicationAdministration.status').exists() then statusR3(src, tgt) "status1";
  src where src.extension.where(url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MedicationAdministration.status').empty() then statusNR3(src, tgt) "status2";
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.medication : CodeableConcept as vs -> tgt.medication = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.medication : Reference as vs -> tgt.medication = create('Reference') as vt then Reference(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.context as vs -> tgt.context as vt then Reference(vs, vt);
  src.supportingInformation as vs -> tgt.supportingInformation as vt then string(vs, vt);
  src.effective : dateTime as vs -> tgt.effective = create('dateTime') as vt then dateTime(vs, vt);
  src.effective : Period as vs -> tgt.effective = create('Period') as vt then Period(vs, vt);
  src.performer as vs0 -> tgt.performer as vt0 then actor(vs0, vt0);
  src.statusReason as vs -> tgt.statusReason as vt then string(vs, vt);
  src.reasonCode where value = 'not-done' -> tgt.reasonNotGiven;
  src.reasonCode where value != 'not-done' -> tgt.reasonCode;
  src.reasonReference as vs -> tgt.reasonReference as vt then string(vs, vt);
  src.request -> tgt.prescription;
  src.device as vs -> tgt.device as vt then Reference(vs, vt);
  src.note as vs -> tgt.note as vt then Annotation(vs, vt);
  src.dosage as s -> tgt.dosage as t then dosage(s, t);
  src.eventHistory as vs -> tgt.eventHistory as vt then string(vs, vt);
}

group actor(source src, target tgt) extends BackboneElement {
  src.actor as vs -> tgt.actor as vt then string(vs, vt);
  src.extension as e where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MedicationAdministration.performer.onBehalfOf' then {
    e.value -> tgt.onBehalfOf;
  };
}

group dosage(source src, target tgt) extends BackboneElement {
  src.text as vs -> tgt.text as vt then Narrative(vs, vt);
  src.site as vs -> tgt.site as vt then string(vs, vt);
  src.route as vs -> tgt.route as vt then string(vs, vt);
  src.method as vs -> tgt.method as vt then CodeableConcept(vs, vt);
  src.dose as vs -> tgt.dose as vt then string(vs, vt);
  src.rate : Ratio as vs -> tgt.rate = create('Ratio') as vt then Ratio(vs, vt);
  src.rate : Quantity as vs -> tgt.rate = create('Quantity') as vt then Quantity(vs, vt);
}

group statusR3(source src, target tgt) {
  src.extension as e where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MedicationAdministration.notGiven' then {
    e.value -> tgt.notGiven;
  };
  src.extension as e where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-MedicationAdministration.status' then {
    e.value -> tgt.status;
  };
}

group statusNR3(source src, target tgt) {
  src.status where value != 'not-done' -> tgt.status;
  src.status where value = 'not-done' -> tgt.notGiven = false;
}

