map "http://hl7.org/fhir/StructureMap/MedicinalProductClinicals4to3" = "R4 to R3 Conversion for MedicinalProductClinicals"

uses "http://hl7.org/fhir/StructureDefinition/MedicinalProductClinicals" alias MedicinalProductClinicals as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/MedicinalProductClinicals" alias MedicinalProductClinicalsR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group MedicinalProductClinicals(source src : MedicinalProductClinicalsR3, target tgt : MedicinalProductClinicals) extends DomainResource <<type+>> {
  src.undesirableEffects as s -> tgt.undesirableEffects as t then MedicinalProductClinicalsUndesirableEffects(s, t);
  src.therapeuticIndication as s -> tgt.therapeuticIndication as t then MedicinalProductClinicalsTherapeuticIndication(s, t);
  src.contraindication as s -> tgt.contraindication as t then MedicinalProductClinicalsContraindication(s, t);
  src.interactions as s -> tgt.interactions as t then MedicinalProductClinicalsInteractions(s, t);
}

group MedicinalProductClinicalsUndesirableEffects(source src, target tgt) extends BackboneElement {
  src.symptomConditionEffect as vs -> tgt.symptomConditionEffect as vt then string(vs, vt);
  src.classification as vs -> tgt.classification as vt then string(vs, vt);
  src.frequencyOfOccurrence as vs -> tgt.frequencyOfOccurrence as vt then string(vs, vt);
  src.population as s -> tgt.population as t then MedicinalProductClinicalsUndesirableEffectsPopulation(s, t);
}

group MedicinalProductClinicalsUndesirableEffectsPopulation(source src, target tgt) extends BackboneElement {
  src.age as vs -> tgt.age as vt then string(vs, vt);
  src.gender as vs -> tgt.gender as vt then code(vs, vt);
  src.race as vs -> tgt.race as vt then string(vs, vt);
  src.physiologicalCondition as vs -> tgt.physiologicalCondition as vt then string(vs, vt);
}

group MedicinalProductClinicalsTherapeuticIndication(source src, target tgt) extends BackboneElement {
  src.diseaseSymptomProcedure as vs -> tgt.diseaseSymptomProcedure as vt then string(vs, vt);
  src.diseaseStatus as vs -> tgt.diseaseStatus as vt then string(vs, vt);
  src.comorbidity as vs -> tgt.comorbidity as vt then string(vs, vt);
  src.intendedEffect as vs -> tgt.intendedEffect as vt then string(vs, vt);
  src.duration as vs -> tgt.duration as vt then string(vs, vt);
  src.undesirableEffects as vs -> tgt.undesirableEffects as vt then string(vs, vt);
  src.otherTherapy as s -> tgt.otherTherapy as t then MedicinalProductClinicalsTherapeuticIndicationOtherTherapy(s, t);
  src.population as vs -> tgt.population as vt then string(vs, vt);
}

group MedicinalProductClinicalsTherapeuticIndicationOtherTherapy(source src, target tgt) extends BackboneElement {
  src.therapyRelationshipType as vs -> tgt.therapyRelationshipType as vt then string(vs, vt);
  src.medication as vs -> tgt.medication as vt then string(vs, vt);
}

group MedicinalProductClinicalsContraindication(source src, target tgt) extends BackboneElement {
  src.disease as vs -> tgt.disease as vt then string(vs, vt);
  src.diseaseStatus as vs -> tgt.diseaseStatus as vt then string(vs, vt);
  src.comorbidity as vs -> tgt.comorbidity as vt then string(vs, vt);
  src.therapeuticIndication as vs -> tgt.therapeuticIndication as vt then string(vs, vt);
  src.otherTherapy as vs -> tgt.otherTherapy as vt then string(vs, vt);
  src.population as vs -> tgt.population as vt then string(vs, vt);
}

group MedicinalProductClinicalsInteractions(source src, target tgt) extends BackboneElement {
  src.interactant as vs -> tgt.interactant as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.effect as vs -> tgt.effect as vt then string(vs, vt);
  src.incidence as vs -> tgt.incidence as vt then string(vs, vt);
  src.management as vs -> tgt.management as vt then string(vs, vt);
}

