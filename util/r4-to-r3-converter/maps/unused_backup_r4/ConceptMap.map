map "http://hl7.org/fhir/StructureMap/ConceptMap4to3" = "R4 to R3 Conversion for ConceptMap"

uses "http://hl7.org/fhir/StructureDefinition/ConceptMap" alias ConceptMap as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/ConceptMap" alias ConceptMapR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group ConceptMap(source src : ConceptMap, target tgt : ConceptMapR3) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.copyright as vs -> tgt.copyright as vt then markdown(vs, vt);
  src.source : uri as vs0 -> tgt.source = create('uri') as vt0 then uri(vs0, vt0);
  src.source : canonical as vs0 -> tgt.source = create('Reference') as vt0 then canonical2Reference(vs0, vt0);
  src.target : uri as vs0 -> tgt.target = create('uri') as vt0 then uri(vs0, vt0) "targetU";
  src.target : canonical as vs0 -> tgt.target = create('Reference') as vt0 then canonical2Reference(vs0, vt0);
  src.group as vs0 -> tgt.group as vt0 then group(vs0, vt0);
}

group group(source src, target tgt) extends BackboneElement {
  src.source as vs -> tgt.source as vt then string(vs, vt);
  src.sourceVersion as vs -> tgt.sourceVersion as vt then string(vs, vt);
  src.target as vs -> tgt.target as vt then string(vs, vt);
  src.targetVersion as vs -> tgt.targetVersion as vt then string(vs, vt);
  src.element as vs0 -> tgt.element as vt0 then element(vs0, vt0);
  src.unmapped as vs0 -> tgt.unmapped as vt0 then unmapped(vs0, vt0);
}

group element(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.display as vs -> tgt.display as vt then string(vs, vt);
  src.target as vs0 -> tgt.target as vt0 then target(vs0, vt0);
}

group target(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.display as vs -> tgt.display as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.display as vs -> tgt.display as vt then string(vs, vt);
  src.equivalence as vs -> tgt.equivalence as vt then string(vs, vt);
  src.comment as vs -> tgt.comment as vt then string(vs, vt);
  src.dependsOn as vs0 -> tgt.dependsOn as vt0 then qualifier(vs0, vt0);
  src.product as vs0 -> tgt.product as vt0 then qualifier(vs0, vt0);
}

group qualifier(source src, target tgt) extends BackboneElement {
  src.property as vs -> tgt.property as vt then string(vs, vt);
  src.system as vs -> tgt.system as vt then string(vs, vt);
  src.value -> tgt.code "code";
  src.display as vs -> tgt.display as vt then string(vs, vt);
}

group unmapped(source src, target tgt) extends BackboneElement {
  src.mode as vs -> tgt.mode as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.display as vs -> tgt.display as vt then string(vs, vt);
  src.url as vs -> tgt.url as vt then uri(vs, vt);
}

