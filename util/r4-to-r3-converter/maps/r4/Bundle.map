map "http://hl7.org/fhir/StructureMap/Bundle4to3" = "R4 to R3 Conversion for Bundle"

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Bundle" alias BundleR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Bundle(source src : Bundle, target tgt : BundleR3) extends Resource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.total as vs -> tgt.total as vt then string(vs, vt);
  src.link as vs0 -> tgt.link as vt0 then link(vs0, vt0);
  src.entry as vs0 -> tgt.entry as vt0 then entry(vs0, vt0);
  src.signature as vs -> tgt.signature as vt then string(vs, vt);
}

group link(source src, target tgt) extends BackboneElement {
  src.relation as vs -> tgt.relation as vt then string(vs, vt);
  src.url as vs -> tgt.url as vt then uri(vs, vt);
}

group entry(source src, target tgt) extends BackboneElement {
  src.fullUrl as vs -> tgt.fullUrl as vt then string(vs, vt);
  src.resource as vs -> tgt.resource as vt then string(vs, vt);
  src.search as vs0 -> tgt.search as vt0 then search(vs0, vt0);
  src.request as vs0 -> tgt.request as vt0 then request(vs0, vt0);
  src.response as vs0 -> tgt.response as vt0 then response(vs0, vt0);
}

group search(source src, target tgt) extends BackboneElement {
  src.mode as vs -> tgt.mode as vt then string(vs, vt);
  src.score as vs -> tgt.score as vt then string(vs, vt);
}

group request(source src, target tgt) extends BackboneElement {
  src.method as vs -> tgt.method as vt then CodeableConcept(vs, vt);
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.ifNoneMatch as vs -> tgt.ifNoneMatch as vt then string(vs, vt);
  src.ifModifiedSince as vs -> tgt.ifModifiedSince as vt then string(vs, vt);
  src.ifMatch as vs -> tgt.ifMatch as vt then string(vs, vt);
  src.ifNoneExist as vs -> tgt.ifNoneExist as vt then string(vs, vt);
}

group response(source src, target tgt) extends BackboneElement {
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.etag as vs -> tgt.etag as vt then string(vs, vt);
  src.lastModified as vs -> tgt.lastModified as vt then string(vs, vt);
  src.outcome as vs -> tgt.outcome as vt then string(vs, vt);
}

