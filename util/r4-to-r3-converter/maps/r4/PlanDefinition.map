map "http://hl7.org/fhir/StructureMap/PlanDefinition4to3" = "R4 to R3 Conversion for PlanDefinition"

uses "http://hl7.org/fhir/StructureDefinition/PlanDefinition" alias PlanDefinition as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/PlanDefinition" alias PlanDefinitionR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group PlanDefinition(source src : PlanDefinition, target tgt : PlanDefinitionR3) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.usage as vs -> tgt.usage as vt then string(vs, vt);
  src.copyright as vs -> tgt.copyright as vt then markdown(vs, vt);
  src.approvalDate as vs -> tgt.approvalDate as vt then string(vs, vt);
  src.lastReviewDate as vs -> tgt.lastReviewDate as vt then string(vs, vt);
  src.effectivePeriod as vs -> tgt.effectivePeriod as vt then string(vs, vt);
  src.topic as vs -> tgt.topic as vt then string(vs, vt);
  src.author as vs ->  tgt.contributor as vt,  vt.type = 'author' then Contributor(vs, vt);
  src.editor as vs ->  tgt.contributor as vt,  vt.type = 'editor',  vt.contact = vs;
  src.reviewer as vs ->  tgt.contributor as vt,  vt.type = 'reviewer',  vt.contact = vs;
  src.endorser as vs ->  tgt.contributor as vt,  vt.type = 'endorser',  vt.contact = vs;
  src.relatedArtifact as vs -> tgt.relatedArtifact as vt then string(vs, vt);
  src.library as vs -> tgt.library as vt then string(vs, vt);
  src.goal as vs0 -> tgt.goal as vt0 then goal(vs0, vt0);
  src.action as vs0 -> tgt.action as vt0 then action(vs0, vt0);
}

group goal(source src, target tgt) extends BackboneElement {
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.priority as vs -> tgt.priority as vt then string(vs, vt);
  src.start as vs -> tgt.start as vt then dateTime(vs, vt);
  src.addresses as vs -> tgt.addresses as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.target as vs0 -> tgt.target as vt0 then target(vs0, vt0);
}

group target(source src, target tgt) extends BackboneElement {
  src.measure as vs -> tgt.measure as vt then string(vs, vt);
  src.detail as vs -> tgt.detail as vt then string(vs, vt);
  src.due as vs -> tgt.due as vt then string(vs, vt);
}

group action(source src, target tgt) extends BackboneElement {
  src.prefix -> tgt.label;
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.textEquivalent as vs -> tgt.textEquivalent as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.reason as vs -> tgt.reason as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.goalId as vs -> tgt.goalId as vt then string(vs, vt);
  src.trigger -> tgt.triggerDefinition;
  src.condition as vs0 -> tgt.condition as vt0 then condition(vs0, vt0);
  src.input as vs -> tgt.input as vt then string(vs, vt);
  src.output as vs -> tgt.output as vt then string(vs, vt);
  src.relatedAction as vs0 -> tgt.relatedAction as vt0 then relatedAction(vs0, vt0);
  src.timing : dateTime as vs -> tgt.timing = create('dateTime') as vt then dateTime(vs, vt);
  src.timing : Period as vs -> tgt.timing = create('Period') as vt then Period(vs, vt);
  src.timing : Duration as vs -> tgt.timing = create('Duration') as vt then Duration(vs, vt);
  src.timing : Range as vs -> tgt.timing = create('Range') as vt then Range(vs, vt);
  src.timing : Timing as vs -> tgt.timing = create('Timing') as vt then Timing(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.groupingBehavior as vs -> tgt.groupingBehavior as vt then string(vs, vt);
  src.selectionBehavior as vs -> tgt.selectionBehavior as vt then string(vs, vt);
  src.requiredBehavior as vs -> tgt.requiredBehavior as vt then string(vs, vt);
  src.precheckBehavior as vs -> tgt.precheckBehavior as vt then string(vs, vt);
  src.cardinalityBehavior as vs -> tgt.cardinalityBehavior as vt then string(vs, vt);
  src.definition -> src.definition;
  src.transform -> src.transform;
  src.dynamicValue as vs0 -> tgt.dynamicValue as vt0 then dynamicValue(vs0, vt0);
  src.action as vs0 -> tgt.action as vt0 then action(vs0, vt0);
}

group condition(source src, target tgt) extends BackboneElement {
  src.kind as vs -> tgt.kind as vt then string(vs, vt);
  src.expression as e then {
    e.description -> tgt.description;
    e.language -> tgt.language;
    e.expression -> tgt.expression;
  };
}

group relatedAction(source src, target tgt) extends BackboneElement {
  src.actionid as vs -> tgt.actionid as vt then string(vs, vt);
  src.relationship as vs -> tgt.relationship as vt then string(vs, vt);
  src.offset : Duration as vs -> tgt.offset = create('Duration') as vt then Duration(vs, vt);
  src.offset : Range as vs -> tgt.offset = create('Range') as vt then Range(vs, vt);
}

group dynamicValue(source src, target tgt) extends BackboneElement {
  src.path as vs -> tgt.path as vt then string(vs, vt);
  src.expression as e then {
    e.description -> tgt.description;
    e.language -> tgt.language;
    e.expression -> tgt.expression;
  };
}

