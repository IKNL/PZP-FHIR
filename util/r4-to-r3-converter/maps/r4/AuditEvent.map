map "http://hl7.org/fhir/StructureMap/AuditEvent4to3" = "R4 to R3 Conversion for AuditEvent"

uses "http://hl7.org/fhir/StructureDefinition/AuditEvent" alias AuditEvent as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/AuditEvent" alias AuditEventR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group AuditEvent(source src : AuditEventR3, target tgt : AuditEvent) extends DomainResource <<type+>> {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.subtype as vs -> tgt.subtype as vt then string(vs, vt);
  src.action as vs -> tgt.action as vt then string(vs, vt);
  src.recorded as vs -> tgt.recorded as vt then string(vs, vt);
  src.outcome as vs -> tgt.outcome as vt then string(vs, vt);
  src.outcomeDesc as vs -> tgt.outcomeDesc as vt then string(vs, vt);
  src.purposeOfEvent as vs -> tgt.purposeOfEvent as vt then string(vs, vt);
  src.agent as s -> tgt.agent as t then AuditEventAgent(s, t);
  src.source as s -> tgt.source as t then AuditEventSource(s, t);
  src.entity as s -> tgt.entity as t then AuditEventEntity(s, t);
}

group AuditEventAgent(source src, target tgt) extends BackboneElement {
  src.role as vs -> tgt.role as vt then string(vs, vt);
  src.who as vs0 where reference.exists() -> tgt.reference as vt0 then ReferenceNoIdentifier(vs0, vt0);
  src.who as vs0 where identifier.exists() -> tgt.userId as vt0 then Reference2Identifier(vs0, vt0);
  src.altId as vs -> tgt.altId as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.requestor as vs -> tgt.requestor as vt then string(vs, vt);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.policy as vs -> tgt.policy as vt then string(vs, vt);
  src.media as vs -> tgt.media as vt then string(vs, vt);
  src.network as s -> tgt.network as t then AuditEventAgentNetwork(s, t);
  src.purposeOfUse as vs -> tgt.purposeOfUse as vt then string(vs, vt);
}

group AuditEventAgentNetwork(source src, target tgt) extends BackboneElement {
  src.address as vs -> tgt.address as vt then Address(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
}

group AuditEventSource(source src, target tgt) extends BackboneElement {
  src.site as vs -> tgt.site as vt then string(vs, vt);
  src.observer as vs0 -> tgt.identifier as vt0 then Reference2Identifier(vs0, vt0);
  src.type as vs -> tgt.type as vt then string(vs, vt);
}

group AuditEventEntity(source src, target tgt) extends BackboneElement {
  src.what as vs0 where identifier.exists() -> tgt.identifier as vt0 then Reference2Identifier(vs0, vt0);
  src.what as vs0 where reference.exists() -> tgt.reference as vt0 then ReferenceNoIdentifier(vs0, vt0);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.role as vs -> tgt.role as vt then string(vs, vt);
  src.lifecycle as vs -> tgt.lifecycle as vt then string(vs, vt);
  src.securityLabel as vs -> tgt.securityLabel as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.query as vs -> tgt.query as vt then string(vs, vt);
  src.detail as s -> tgt.detail as t then AuditEventEntityDetail(s, t);
}

group AuditEventEntityDetail(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.value where $this is base64Binary -> tgt.value;
}

