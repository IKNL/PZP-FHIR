map "http://hl7.org/fhir/StructureMap/Patient4to3" = "R4 to R3 Conversion for Patient"

uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Patient" alias PatientR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Patient(source src : Patient, target tgt : PatientR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.active as vs -> tgt.active as vt then boolean(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.telecom as vs -> tgt.telecom as vt then ContactPoint(vs, vt);
  src.gender as vs -> tgt.gender as vt then code(vs, vt);
  src.birthDate as vs -> tgt.birthDate as vt then date(vs, vt);
  src.deceased : boolean as vs -> tgt.deceased = create('boolean') as vt then boolean(vs, vt);
  src.deceased : dateTime as vs -> tgt.deceased = create('dateTime') as vt then dateTime(vs, vt);
  src.address as vs -> tgt.address as vt then Address(vs, vt);
  src.maritalStatus as vs -> tgt.maritalStatus as vt then CodeableConcept(vs, vt);
  src.multipleBirth : boolean as vs -> tgt.multipleBirth = create('boolean') as vt then boolean(vs, vt);
  src.multipleBirth : integer as vs -> tgt.multipleBirth = create('integer') as vt then integer(vs, vt);
  src.photo as vs -> tgt.photo as vt then Attachment(vs, vt);
  src.contact as vs0 -> tgt.contact as vt0 then contact(vs0, vt0);
  src.extension as vs0 where url = 'http://hl7.org/fhir/StructureDefinition/patient-animal' -> tgt.animal as vt0 then animal(vs0, vt0) "animal";
  src.communication as vs0 -> tgt.communication as vt0 then communication(vs0, vt0);
  src.generalPractitioner as vs -> tgt.generalPractitioner as vt then Reference(vs, vt);
  src.managingOrganization as vs -> tgt.managingOrganization as vt then Reference(vs, vt);
  src.link as vs0 -> tgt.link as vt0 then link(vs0, vt0);
}

group contact(source src, target tgt) extends BackboneElement {
  src.relationship as vs -> tgt.relationship as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.telecom as vs -> tgt.telecom as vt then ContactPoint(vs, vt);
  src.address as vs -> tgt.address as vt then Address(vs, vt);
  src.gender as vs -> tgt.gender as vt then code(vs, vt);
  src.organization as vs -> tgt.organization as vt then string(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
}

group animal(source src, target tgt) {
  src.extension as ext where url = 'species' then {
    ext.value as vs0 -> tgt.species = vs0 "species2";
  } "species";
  src.extension as ext where url = 'breed' then {
    ext.value as vs0 -> tgt.breed = vs0 "breed";
  } "breed";
  src.extension as ext where url = 'genderStatus' then {
    ext.value as vs0 -> tgt.genderStatus = vs0 "genderStatus";
  } "genderStatus";
}

group communication(source src, target tgt) extends BackboneElement {
  src.language as vs -> tgt.language as vt then code(vs, vt);
  src.preferred as vs -> tgt.preferred as vt then string(vs, vt);
}

group link(source src, target tgt) extends BackboneElement {
  src.other as vs -> tgt.other as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
}

