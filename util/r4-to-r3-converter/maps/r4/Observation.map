map "http://hl7.org/fhir/StructureMap/Observation4to3" = "R4 to R3 Conversion for Observation"

uses "http://hl7.org/fhir/StructureDefinition/Observation" alias Observation as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Observation" alias ObservationR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Observation(source src : Observation, target tgt : ObservationR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.basedOn as vs -> tgt.basedOn as vt then Reference(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  // Cross-version property mapping: encounter -> extension
  src.encounter as vs -> tgt.extension as ext then createObservationContextExtension(vs, ext) "context-extension-rule";
  src.effective : dateTime as vs -> tgt.effective = create('dateTime') as vt then dateTime(vs, vt);
  src.effective : Period as vs -> tgt.effective = create('Period') as vt then Period(vs, vt);
  src.issued as vs -> tgt.issued as vt then instant(vs, vt);
  src.performer as vs -> tgt.performer as vt then Reference(vs, vt);
  src.value : Quantity as vs -> tgt.value = create('Quantity') as vt then Quantity(vs, vt);
  src.value : CodeableConcept as vs -> tgt.value = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.value : string as vs -> tgt.value = create('string') as vt then string(vs, vt);
  src.value : boolean as vs -> tgt.value = create('boolean') as vt then boolean(vs, vt);
  src.value : Range as vs -> tgt.value = create('Range') as vt then Range(vs, vt);
  src.value : Ratio as vs -> tgt.value = create('Ratio') as vt then Ratio(vs, vt);
  src.value : SampledData as vs -> tgt.value = create('SampledData') as vt then SampledData(vs, vt);
  src.value : time as vs -> tgt.value = create('time') as vt then time(vs, vt);
  src.value : dateTime as vs -> tgt.value = create('dateTime') as vt then dateTime(vs, vt);
  src.value : Period as vs -> tgt.value = create('Period') as vt then Period(vs, vt);
  src.dataAbsentReason as vs -> tgt.dataAbsentReason as vt then CodeableConcept(vs, vt);
  src.interpretation as vs -> tgt.interpretation as vt then CodeableConcept(vs, vt);
  // Complex cross-version property mapping: note -> to comment

  src.note first as vs -> tgt.extension as ext then createObservationCommentExtension(vs, ext) "comment-extension-rule";

  src.bodySite as vs -> tgt.bodySite as vt then CodeableConcept(vs, vt);
  src.method as vs -> tgt.method as vt then CodeableConcept(vs, vt);
  src.specimen as vs -> tgt.specimen as vt then Reference(vs, vt);
  src.device as vs -> tgt.device as vt then Reference(vs, vt);
  src.referenceRange as vs0 -> tgt.referenceRange as vt0 then referenceRange(vs0, vt0);
  // !NOT TESTED! Complex cross-version property mapping: hasMember -> related with type and target  !NOT TESTED!
  src.hasMember as vs -> tgt.extension as ext then createRelatedComplexExtension(vs, ext, 'has-member') "hasMember-related-extension-rule";
  // !NOT TESTED! Complex cross-version property mapping: derivedFrom -> related with type and target !NOT TESTED! 
  src.derivedFrom as vs -> tgt.extension as ext then createRelatedComplexExtension(vs, ext, 'derived-from') "derivedFrom-related-extension-rule";
  src.extension as vs0 where url = 'http://hl7.org/fhir/3.0/StructureDefinition/Observation.sequelTo' ->  tgt.related as rel,  rel.type = 'sequel-to',  rel.target as vt0 then relatedExt(vs0, vt0) "related3";
  src.extension as vs0 where url = 'http://hl7.org/fhir/3.0/StructureDefinition/Observation.replaces' ->  tgt.related as rel,  rel.type = 'replaces',  rel.target as vt0 then relatedExt(vs0, vt0) "related4";
  src.extension as vs0 where url = 'http://hl7.org/fhir/3.0/StructureDefinition/Observation.qualifiedBy' ->  tgt.related as rel,  rel.type = 'qualifiedBy',  rel.target as vt0 then relatedExt(vs0, vt0) "related5";
  src.extension as vs0 where url = 'http://hl7.org/fhir/3.0/StructureDefinition/Observation.interferedBy' ->  tgt.related as rel,  rel.type = 'interfered-by',  rel.target as vt0 then relatedExt(vs0, vt0) "related6";
  src.component as vs0 -> tgt.component as vt0 then component(vs0, vt0);
}

group relatedExt(source src, target tgt) {
  src.value : Reference as vs0 then Reference(vs0, tgt);
}

group referenceRange(source src, target tgt) extends BackboneElement {
  src.low as vs -> tgt.low as vt then SimpleQuantity(vs, vt);
  src.high as vs -> tgt.high as vt then SimpleQuantity(vs, vt);
  src.type as vs -> tgt.type as vt then CodeableConcept(vs, vt);
  src.appliesTo as vs -> tgt.appliesTo as vt then CodeableConcept(vs, vt);
  src.age as vs -> tgt.age as vt then Range(vs, vt);
  src.text as vs -> tgt.text as vt then string(vs, vt);
}

group component(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.value : Quantity as vs -> tgt.value = create('Quantity') as vt then Quantity(vs, vt);
  src.value : CodeableConcept as vs -> tgt.value = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.value : string as vs -> tgt.value = create('string') as vt then string(vs, vt);
  src.value : Range as vs -> tgt.value = create('Range') as vt then Range(vs, vt);
  src.value : Ratio as vs -> tgt.value = create('Ratio') as vt then Ratio(vs, vt);
  src.value : SampledData as vs -> tgt.value = create('SampledData') as vt then SampledData(vs, vt);
  src.value : time as vs -> tgt.value = create('time') as vt then time(vs, vt);
  src.value : dateTime as vs -> tgt.value = create('dateTime') as vt then dateTime(vs, vt);
  src.value : Period as vs -> tgt.value = create('Period') as vt then Period(vs, vt);
  src.dataAbsentReason as vs -> tgt.dataAbsentReason as vt then CodeableConcept(vs, vt);
  src.interpretation as vs -> tgt.interpretation as vt then CodeableConcept(vs, vt);
  src.referenceRange as vs0 -> tgt.referenceRange as vt0 then referenceRange(vs0, vt0);
}

group createObservationContextExtension(source src, target ext) {
  src -> ext.url = 'http://fhir.conversion/cross-version/Observation.context' "context-url";
  src -> ext.value = src "context-value";
}

group createObservationCommentExtension(source src, target ext) {
  src -> ext.url = 'http://fhir.conversion/cross-version/Observation.comment' "comment-url";
  src -> ext.value = create('string') as vs then Annotation2string(src, vs) "comment-value";
}

group createRelatedComplexExtension(source src, target ext, source relationType) {
  src -> ext.url = 'http://fhir.conversion/cross-version/Observation.related' "related-base-url";
  src -> ext.extension as typeExt then {
    relationType -> typeExt.url = 'type' "type-url";
    relationType -> typeExt.value = relationType "type-value";
  } "type-extension";
  src -> ext.extension as targetExt then {
    src -> targetExt.url = 'target' "target-url";
    src -> targetExt.value = src "target-value";
  } "target-extension";
}
