map "http://hl7.org/fhir/StructureMap/CarePlan4to3" = "R4 to R3 Conversion for CarePlan"

uses "http://hl7.org/fhir/StructureDefinition/CarePlan" alias CarePlan as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/CarePlan" alias CarePlanR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group CarePlan(source src : CarePlanR3, target tgt : CarePlan) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.instantiatesCanonical -> tgt.definition;
  src.basedOn as vs -> tgt.basedOn as vt then string(vs, vt);
  src.replaces as vs -> tgt.replaces as vt then string(vs, vt);
  src.partOf as vs -> tgt.partOf as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.intent as vs -> tgt.intent as vt then string(vs, vt);
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.encounter -> tgt.context;
  src.period as vs -> tgt.period as vt then string(vs, vt);
  src.author as vs -> tgt.author as vt then string(vs, vt);
  src.contributor as vs -> tgt.contributor as vt then string(vs, vt);
  src.careTeam as vs -> tgt.careTeam as vt then string(vs, vt);
  src.addresses as vs -> tgt.addresses as vt then string(vs, vt);
  src.supportingInfo as vs -> tgt.supportingInfo as vt then string(vs, vt);
  src.goal as vs -> tgt.goal as vt then string(vs, vt);
  src.activity as vs -> tgt.activity as vt then activity(vs, vt);
  src.note as vs -> tgt.note as vt then Annotation(vs, vt);
}

group activity(source src, target tgt) extends BackboneElement {
  src.outcomeCodeableConcept as vs -> tgt.outcomeCodeableConcept as vt then string(vs, vt);
  src.outcomeReference as vs -> tgt.outcomeReference as vt then string(vs, vt);
  src.progress as vs -> tgt.progress as vt then string(vs, vt);
  src.reference as vs -> tgt.reference as vt then string(vs, vt);
  src.detail as vs -> tgt.detail as vt then detail(vs, vt);
}

group detail(source src, target tgt) extends BackboneElement {
  src.extension as e where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-CarePlan.activity.detail.category' then {
    e.value -> tgt.category;
  };
  src.instantiatesCanonical -> tgt.definition;
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.reasonCode as vs -> tgt.reasonCode as vt then string(vs, vt);
  src.reasonReference as vs -> tgt.reasonReference as vt then string(vs, vt);
  src.goal as vs -> tgt.goal as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.statusReason as s then {
    s.text -> tgt.statusReason;
  };
  src.doNotPerform -> tgt.prohibited;
  src.scheduled : Timing as s -> tgt.scheduled = create('Timing') as t then Timing(s, t);
  src.scheduled : Period as s -> tgt.scheduled = create('Period') as t then Period(s, t);
  src.scheduled : string as s -> tgt.scheduled = create('string') as t then string(s, t);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.performer as vs -> tgt.performer as vt then Reference(vs, vt);
  src.product : CodeableConcept as s -> tgt.product = create('CodeableConcept') as t then CodeableConcept(s, t);
  src.product : Reference as s -> tgt.product = create('Reference') as t then Reference(s, t);
  src.dailyAmount as vs -> tgt.dailyAmount as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
}

