map "http://hl7.org/fhir/StructureMap/Reference4to3" = "R4 to R3 Conversion for Reference"

uses "http://hl7.org/fhir/StructureDefinition/Reference" alias Reference as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Reference" alias ReferenceR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Reference(source src : Reference, target tgt : ReferenceR3) extends Element <<type+>> {
  src.reference as vs -> tgt.reference as vt then string(vs, vt) "Reference-reference";
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt) "Reference-identifier";
  src.display as vs -> tgt.display as vt then string(vs, vt) "Reference-display";
}

group ReferenceNoIdentifier(source src : Reference, target tgt : ReferenceR3) extends Element {
  src.reference as vs -> tgt.reference as vt then string(vs, vt);
  src.display as vs -> tgt.display as vt then string(vs, vt);
}

group canonical2Reference(source src : canonicalR3, target tgt : ReferenceR3) <<types>> {
  src.id as vs -> tgt.id as vt then string(vs, vt);
  src.extension as vs where (url.startsWith('http://hl7.org/fhir/3.0/StructureDefinition').not() and (url != 'http://hl7.org/fhir/StructureDefinition/rendered-value')) -> tgt.extension as vt then Extension(vs, vt);
  src.value as vs -> tgt.reference = vs "Reference-canonical-assignment-to-reference";
  src.extension as e where url = 'http://hl7.org/fhir/StructureDefinition/rendered-value' then {
    e.value as e1 -> tgt.display as e2 then string(e1, e2);
  };
}

group uri2Reference(source src : uri, target tgt : ReferenceR3) <<types>> {
  src.id -> tgt.id;
  src.extension where (url.startsWith('http://hl7.org/fhir/3.0/StructureDefinition').not() and (url != 'http://hl7.org/fhir/StructureDefinition/rendered-value')) -> tgt.extension;
  src.value -> tgt.reference;
  src.extension as e where url = 'http://hl7.org/fhir/StructureDefinition/rendered-value' then {
    e.value -> tgt.display;
  };
}

group Reference2Identifier(source src : Reference, target tgt : IdentifierR3) extends Element <<types>> {
  src.identifier as vs0 then Identifier(vs0, tgt) "inner";
}

