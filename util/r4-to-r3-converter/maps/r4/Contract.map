map "http://hl7.org/fhir/StructureMap/Contract4to3" = "R4 to R3 Conversion for Contract"

uses "http://hl7.org/fhir/StructureDefinition/Contract" alias Contract as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Contract" alias ContractR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Contract(source src : ContractR3, target tgt : Contract) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.contentDerivative as vs -> tgt.contentDerivative as vt then string(vs, vt);
  src.issued as vs -> tgt.issued as vt then instant(vs, vt);
  src.applies as vs -> tgt.applies as vt then string(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.authority as vs -> tgt.authority as vt then string(vs, vt);
  src.domain as vs -> tgt.domain as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.subType as vs -> tgt.subType as vt then string(vs, vt);
  src.term as s -> tgt.term as t then ContractTerm(s, t);
  src.signer as s -> tgt.signer as t then ContractSigner(s, t);
  src.friendly as s -> tgt.friendly as t then ContractFriendly(s, t);
  src.legal as s -> tgt.legal as t then ContractLegal(s, t);
  src.rule as s -> tgt.rule as t then ContractRule(s, t);
  src.legallyBinding as vs -> tgt.legallyBinding as vt then string(vs, vt);
}

group ContractTerm(source src, target tgt) extends BackboneElement {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.issued as vs -> tgt.issued as vt then instant(vs, vt);
  src.applies as vs -> tgt.applies as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.subType as vs -> tgt.subType as vt then string(vs, vt);
  src.offer as s -> tgt.offer as t then ContractTermOffer(s, t);
  src.asset as s -> tgt.asset as t then ContractTermAsset(s, t);
  src.agent as s -> tgt.agent as t then ContractTermAgent(s, t);
  src.action as vs -> tgt.action as vt then string(vs, vt);
  src.actionReason as vs -> tgt.actionReason as vt then string(vs, vt);
  src.group as vs -> tgt.group as vt then string(vs, vt);
}

group ContractTermOffer(source src, target tgt) extends BackboneElement {
  src.topic as vs -> tgt.topic as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.decision as vs -> tgt.decision as vt then string(vs, vt);
  src.text as vs -> tgt.text as vt then Narrative(vs, vt);
  src.linkId as vs -> tgt.linkId as vt then string(vs, vt);
}

group ContractTermAsset(source src, target tgt) extends BackboneElement {
  src.class as vs -> tgt.class as vt then string(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
  src.dataPeriod as vs -> tgt.dataPeriod as vt then string(vs, vt);
  src.data as s -> tgt.data as t then ContractTermAssetData(s, t);
  src.valuedItem as s -> tgt.valuedItem as t then ContractTermAssetValuedItem(s, t);
  src.securityLabel as vs -> tgt.securityLabel as vt then string(vs, vt);
}

group ContractTermAssetData(source src, target tgt) extends BackboneElement {
  src.meaning as vs -> tgt.meaning as vt then string(vs, vt);
  src.reference as vs -> tgt.reference as vt then string(vs, vt);
}

group ContractTermAssetValuedItem(source src, target tgt) extends BackboneElement {
  src.entity as vs -> tgt.entity as vt then string(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.effectiveTime as vs -> tgt.effectiveTime as vt then string(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.unitPrice as vs -> tgt.unitPrice as vt then string(vs, vt);
  src.factor as vs -> tgt.factor as vt then string(vs, vt);
  src.points as vs -> tgt.points as vt then string(vs, vt);
  src.net as vs -> tgt.net as vt then string(vs, vt);
}

group ContractTermAgent(source src, target tgt) extends BackboneElement {
  src.actor as vs -> tgt.actor as vt then string(vs, vt);
  src.role as vs -> tgt.role as vt then string(vs, vt);
}

group ContractSigner(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.party as vs -> tgt.party as vt then string(vs, vt);
  src.signature as vs -> tgt.signature as vt then string(vs, vt);
}

group ContractFriendly(source src, target tgt) extends BackboneElement {
  src.content as vs -> tgt.content as vt then string(vs, vt);
}

group ContractLegal(source src, target tgt) extends BackboneElement {
  src.content as vs -> tgt.content as vt then string(vs, vt);
}

group ContractRule(source src, target tgt) extends BackboneElement {
  src.content as vs -> tgt.content as vt then string(vs, vt);
}

