map "http://hl7.org/fhir/StructureMap/Timing4to3" = "R4 to R3 Conversion for Timing"

uses "http://hl7.org/fhir/StructureDefinition/Timing" alias Timing as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Timing" alias TimingR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Timing(source src : Timing, target tgt : TimingR3) extends BackboneElement <<type+>> {
  src.event as vs -> tgt.event as vt then string(vs, vt);
  src.repeat as vs0 -> tgt.repeat as vt0 then repeat(vs0, vt0);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
}

group repeat(source src, target tgt) extends Element {
  src.bounds : Duration as vs -> tgt.bounds = create('Duration') as vt then Duration(vs, vt);
  src.bounds : Range as vs -> tgt.bounds = create('Range') as vt then Range(vs, vt);
  src.bounds : Period as vs -> tgt.bounds = create('Period') as vt then Period(vs, vt);
  src.count as vs -> tgt.count as vt then string(vs, vt);
  src.countMax as vs -> tgt.countMax as vt then string(vs, vt);
  src.duration as vs -> tgt.duration as vt then string(vs, vt);
  src.durationMax as vs -> tgt.durationMax as vt then string(vs, vt);
  src.durationUnit as vs -> tgt.durationUnit as vt then string(vs, vt);
  src.frequency as vs -> tgt.frequency as vt then string(vs, vt);
  src.frequencyMax as vs -> tgt.frequencyMax as vt then string(vs, vt);
  src.period as vs -> tgt.period as vt then string(vs, vt);
  src.periodMax as vs -> tgt.periodMax as vt then string(vs, vt);
  src.periodUnit as vs -> tgt.periodUnit as vt then string(vs, vt);
  src.dayOfWeek as vs -> tgt.dayOfWeek as vt then string(vs, vt);
  src.timeOfDay as vs -> tgt.timeOfDay as vt then string(vs, vt);
  src.when as vs -> tgt.when as vt then string(vs, vt);
  src.offset as vs -> tgt.offset as vt then string(vs, vt);
}

