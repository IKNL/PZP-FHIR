map "http://hl7.org/fhir/StructureMap/MessageDefinition4to3" = "R4 to R3 Conversion for MessageDefinition"

conceptmap "MessageSignificanceCategory" {
  prefix s = "http://hl7.org/fhir/message-significance-category"
  prefix t = "http://hl7.org/fhir/message-significance-category"

  s:consequence - t:Consequence
  s:currency - t:Currency
  s:notification - t:Notification
}

uses "http://hl7.org/fhir/StructureDefinition/MessageDefinition" alias MessageDefinition as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/MessageDefinition" alias MessageDefinitionR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group MessageDefinition(source src : MessageDefinition, target tgt : MessageDefinitionR3) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.copyright as vs -> tgt.copyright as vt then markdown(vs, vt);
  src.base as vs -> tgt.base as vt then string(vs, vt);
  src.parent as vs -> tgt.parent as vt then string(vs, vt);
  src.replaces as vs -> tgt.replaces as vt then string(vs, vt);
  src.event as vs0 -> tgt.event = create('Coding') as vt0 then Coding(vs0, vt0);
  src.category as v -> tgt.category = translate(v, '#MessageSignificanceCategory', 'code');
  src.focus as vs0 -> tgt.focus as vt0 then focus(vs0, vt0);
  src.responseRequired where value = 'always' -> tgt.responseRequired = true;
  src.responseRequired where value = 'never' -> tgt.responseRequired = false;
  src.allowedResponse as vs0 -> tgt.allowedResponse as vt0 then allowedResponse(vs0, vt0);
}

group focus(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.profile as vs -> tgt.profile as vt then canonical(vs, vt);
  src.min as vs -> tgt.min as vt then string(vs, vt);
  src.max as vs -> tgt.max as vt then string(vs, vt);
}

group allowedResponse(source src, target tgt) extends BackboneElement {
  src.message as vs -> tgt.message as vt then string(vs, vt);
  src.situation as vs -> tgt.situation as vt then string(vs, vt);
}

