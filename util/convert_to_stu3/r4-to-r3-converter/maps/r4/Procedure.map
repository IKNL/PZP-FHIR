map "http://hl7.org/fhir/StructureMap/Procedure4to3" = "R4 to R3 Conversion for Procedure"

conceptmap "EventStatus" {
  prefix s = "http://hl7.org/fhir/ValueSet/event-status"
  prefix t = "http://hl7.org/fhir/ValueSet/event-status"

  s:"'entered-in-error'" - t:"'entered-in-error'"
  s:"'in-progress'" - t:"'in-progress'"
  s:"'on-hold'" - t:suspended
  s:aborted - t:stopped
  s:completed - t:completed
  s:preparation - t:preparation
  s:stopped - t:aborted
  s:suspended - t:suspended
  s:unknown - t:unknown
}

uses "http://hl7.org/fhir/StructureDefinition/Procedure" alias Procedure as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Procedure" alias ProcedureR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Procedure(source src : ProcedureR3, target tgt : Procedure) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.instantiatesCanonical as vs -> tgt.instantiatesCanonical as vt then string(vs, vt);
  src.instantiatesUri as vs -> tgt.instantiatesUri as vt then string(vs, vt);
  src.basedOn as vs -> tgt.basedOn as vt then string(vs, vt);
  src.partOf as vs -> tgt.partOf as vt then string(vs, vt);
  src.status where value = 'not-done' ->  tgt.status = create('code') as vt,  vt.value = 'suspended',  tgt.notDone = true;
  src.status as vs where (value = 'not-done').not() -> tgt.status = translate(vs, '#EventStatus', 'code');
  src.statusReason as vs where src.status = 'not-done' -> tgt.notDoneReason = create('CodeableConcept') as vt then CodeableConcept(vs, vt);
  src.category as vs -> tgt.category as vt then CodeableConcept(vs, vt);
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.subject as vs -> tgt.subject as vt then Reference(vs, vt);
  src.encounter : Reference as vs -> tgt.context = create('Reference') as vt then Reference(vs, vt);
  src.performed as vs -> tgt.performed as vt then string(vs, vt);
  src.recorder as vs -> tgt.recorder as vt then string(vs, vt);
  src.asserter as vs -> tgt.asserter as vt then string(vs, vt);
  src.performer as s -> tgt.performer as t then ProcedurePerformer(s, t);
  src.location as vs -> tgt.location as vt then string(vs, vt);
  src.reasonCode as vs -> tgt.reasonCode as vt then string(vs, vt);
  src.reasonReference as vs -> tgt.reasonReference as vt then string(vs, vt);
  src.bodySite as vs -> tgt.bodySite as vt then CodeableConcept(vs, vt);
  src.outcome as vs -> tgt.outcome as vt then string(vs, vt);
  src.report as vs -> tgt.report as vt then string(vs, vt);
  src.complication as vs -> tgt.complication as vt then string(vs, vt);
  src.complicationDetail as vs -> tgt.complicationDetail as vt then string(vs, vt);
  src.followUp as vs -> tgt.followUp as vt then string(vs, vt);
  src.note as vs -> tgt.note as vt then Annotation(vs, vt);
  src.focalDevice as s -> tgt.focalDevice as t then ProcedureFocalDevice(s, t);
  src.usedReference as vs -> tgt.usedReference as vt then string(vs, vt);
  src.usedCode as vs -> tgt.usedCode as vt then string(vs, vt);
}

group ProcedurePerformer(source src, target tgt) extends BackboneElement {
  src.function -> tgt.role;
  src.actor as vs -> tgt.actor as vt then string(vs, vt);
  src.onBehalfOf as vs -> tgt.onBehalfOf as vt then string(vs, vt);
}

group ProcedureFocalDevice(source src, target tgt) extends BackboneElement {
  src.action as vs -> tgt.action as vt then string(vs, vt);
  src.manipulated as vs -> tgt.manipulated as vt then string(vs, vt);
}

