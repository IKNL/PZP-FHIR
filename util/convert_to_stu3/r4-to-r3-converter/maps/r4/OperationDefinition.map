map "http://hl7.org/fhir/StructureMap/OperationDefinition4to3" = "R4 to R3 Conversion for OperationDefinition"

uses "http://hl7.org/fhir/StructureDefinition/OperationDefinition" alias OperationDefinition as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/OperationDefinition" alias OperationDefinitionR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group OperationDefinition(source src : OperationDefinition, target tgt : OperationDefinitionR3) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.kind as vs -> tgt.kind as vt then string(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.affectsState -> tgt.idempotent;
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.comment as vs -> tgt.comment as vt then markdownToString(vs, vt);
  src.base as vs -> tgt.base as vt then string(vs, vt);
  src.resource as vs -> tgt.resource as vt then string(vs, vt);
  src.system as vs -> tgt.system as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.instance as vs -> tgt.instance as vt then string(vs, vt);
  src.parameter as vs0 -> tgt.parameter as vt0 then parameter(vs0, vt0);
  src.overload as vs0 -> tgt.overload as vt0 then {
    vs0.parameterName -> vt0.parameterName;
    vs0.comment -> vt0.comment;
  };
}

group parameter(source src, target tgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.use as vs -> tgt.use as vt then code(vs, vt);
  src.min as vs -> tgt.min as vt then string(vs, vt);
  src.max as vs -> tgt.max as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.searchType as vs -> tgt.searchType as vt then string(vs, vt);
  src.targetProfile -> tgt.profile "profile";
  src.binding as vs0 -> tgt.binding as vt0 then binding(vs0, vt0);
  src.part as vs0 -> tgt.part as vt0 then parameter(vs0, vt0);
}

group binding(source src, target tgt) extends BackboneElement {
  src.strength as vs -> tgt.strength as vt then string(vs, vt);
  src.valueSet as vs0 where value.startsWith('http://hl7.org').not() -> tgt.valueSet = create('uri') as vt0 then canonical2Uri(vs0, vt0) "valueSetU";
  src.valueSet as vs0 where value.startsWith('http://hl7.org') -> tgt.valueSet = create('Reference') as vt0 then canonical2Reference(vs0, vt0) "valueSetR";
}

