map "http://hl7.org/fhir/StructureMap/CapabilityStatement4to3" = "R4 to R3 Conversion for CapabilityStatement"

uses "http://hl7.org/fhir/StructureDefinition/CapabilityStatement" alias CapabilityStatement as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/CapabilityStatement" alias CapabilityStatementR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group CapabilityStatement(source src : CapabilityStatement, target tgt : CapabilityStatementR3) extends DomainResource <<type+>> {
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.title as vs -> tgt.title as vt then string(vs, vt);
  src.status as vs -> tgt.status as vt then code(vs, vt);
  src.experimental as vs -> tgt.experimental as vt then boolean(vs, vt);
  src.date as vs -> tgt.date as vt then dateTime(vs, vt);
  src.publisher as vs -> tgt.publisher as vt then string(vs, vt);
  src.contact -> tgt.contact;
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.useContext as vs -> tgt.useContext as vt then string(vs, vt);
  src.jurisdiction as vs -> tgt.jurisdiction as vt then string(vs, vt);
  src.purpose as vs -> tgt.purpose as vt then markdown(vs, vt);
  src.copyright as vs -> tgt.copyright as vt then markdown(vs, vt);
  src.kind as vs -> tgt.kind as vt then string(vs, vt);
  src.instantiates as vs -> tgt.instantiates as vt then string(vs, vt);
  src.software as vs0 -> tgt.software as vt0 then software(vs0, vt0);
  src.implementation as vs0 -> tgt.implementation as vt0 then implementation(vs0, vt0);
  src.fhirVersion as vs -> tgt.fhirVersion as vt then string(vs, vt);
  src.extension as ext where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-CapabilityStatement.acceptUnknown' then {
    ext.value : code as vs0 -> tgt.acceptUnknown = vs0 "acceptUnknown2";
  } "acceptUnknown";
  src.format as vs -> tgt.format as vt then string(vs, vt);
  src.patchFormat as vs -> tgt.patchFormat as vt then string(vs, vt);
  src.implementationGuide as vs -> tgt.implementationGuide as vt then string(vs, vt);
  src.rest as vs0 -> tgt.rest as vt0 then rest(vs0, vt0);
  src.messaging as vs0 -> tgt.messaging as vt0 then messaging(vs0, vt0);
  src.document as vs0 -> tgt.document as vt0 then document(vs0, vt0);
}

group software(source src, target tgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.version as vs -> tgt.version as vt then string(vs, vt);
  src.releaseDate as vs -> tgt.releaseDate as vt then string(vs, vt);
}

group implementation(source src, target tgt) extends BackboneElement {
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
  src.url as vs -> tgt.url as vt then uri(vs, vt);
}

group rest(source src, target tgt) extends BackboneElement {
  src.mode as vs -> tgt.mode as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.security as vs0 -> tgt.security as vt0 then security(vs0, vt0);
  src.resource as vs0 -> tgt.resource as vt0 then resource(vs0, vt0);
  src.interaction as vs0 -> tgt.interaction as vt0 then interaction(vs0, vt0);
  src.searchParam as vs0 -> tgt.searchParam as vt0 then searchParam(vs0, vt0);
  src.operation as vs0 -> tgt.operation as vt0 then operation(vs0, vt0);
  src.compartment as vs -> tgt.compartment as vt then string(vs, vt);
}

group security(source src, target tgt) extends BackboneElement {
  src.cors as vs -> tgt.cors as vt then string(vs, vt);
  src.service as vs -> tgt.service as vt then string(vs, vt);
  src.description as vs -> tgt.description as vt then markdown(vs, vt);
}

group resource(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.profile as vs -> tgt.profile as vt then canonical(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.interaction as vs0 -> tgt.interaction as vt0 then interaction(vs0, vt0);
  src.versioning as vs -> tgt.versioning as vt then string(vs, vt);
  src.readHistory as vs -> tgt.readHistory as vt then string(vs, vt);
  src.updateCreate as vs -> tgt.updateCreate as vt then string(vs, vt);
  src.conditionalCreate as vs -> tgt.conditionalCreate as vt then string(vs, vt);
  src.conditionalRead as vs -> tgt.conditionalRead as vt then string(vs, vt);
  src.conditionalUpdate as vs -> tgt.conditionalUpdate as vt then string(vs, vt);
  src.conditionalDelete as vs -> tgt.conditionalDelete as vt then string(vs, vt);
  src.referencePolicy as vs -> tgt.referencePolicy as vt then string(vs, vt);
  src.searchInclude as vs -> tgt.searchInclude as vt then string(vs, vt);
  src.searchRevInclude as vs -> tgt.searchRevInclude as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.searchParam as vs0 -> tgt.searchParam as vt0 then searchParam(vs0, vt0);
}

group interaction(source src, target tgt) extends BackboneElement {
  src.code as vs -> tgt.code as vt then CodeableConcept(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
}

group searchParam(source src, target tgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.definition as vs -> tgt.definition as vt then string(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
}

group operation(source src, target tgt) extends BackboneElement {
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.definition as vs -> tgt.definition as vt then string(vs, vt);
}

group messaging(source src, target tgt) extends BackboneElement {
  src.endpoint as vs0 -> tgt.endpoint as vt0 then endpoint(vs0, vt0);
  src.reliableCache as vs -> tgt.reliableCache as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.supportedMessage as vs0 -> tgt.supportedMessage as vt0 then supportedMessage(vs0, vt0);
}

group endpoint(source src, target tgt) extends BackboneElement {
  src.protocol as vs -> tgt.protocol as vt then string(vs, vt);
  src.address as vs -> tgt.address as vt then Address(vs, vt);
}

group supportedMessage(source src, target tgt) extends BackboneElement {
  src.mode as vs -> tgt.mode as vt then string(vs, vt);
  src.definition as vs -> tgt.definition as vt then string(vs, vt);
}

group document(source src, target tgt) extends BackboneElement {
  src.mode as vs -> tgt.mode as vt then string(vs, vt);
  src.documentation as vs -> tgt.documentation as vt then string(vs, vt);
  src.profile as vs -> tgt.profile as vt then canonical(vs, vt);
}

