map "http://hl7.org/fhir/StructureMap/Sequence4to3" = "R4 to R3 Conversion for Sequence"

uses "http://hl7.org/fhir/StructureDefinition/MolecularSequence" alias Sequence as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/Sequence" alias SequenceR3 as target

imports "http://hl7.org/fhir/StructureMap/*4to3"

group Sequence(source src : MolecularSequence, target tgt : SequenceR3) extends DomainResource <<type+>> {
  src.identifier as vs -> tgt.identifier as vt then Identifier(vs, vt);
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.coordinateSystem as vs -> tgt.coordinateSystem as vt then string(vs, vt);
  src.patient as vs -> tgt.patient as vt then string(vs, vt);
  src.specimen as vs -> tgt.specimen as vt then Reference(vs, vt);
  src.device as vs -> tgt.device as vt then Reference(vs, vt);
  src.performer as vs -> tgt.performer as vt then Reference(vs, vt);
  src.quantity as vs -> tgt.quantity as vt then string(vs, vt);
  src.referenceSeq as vs0 -> tgt.referenceSeq as vt0 then referenceSeq(vs0, vt0);
  src.variant as vs0 -> tgt.variant as vt0 then variant(vs0, vt0);
  src.observedSeq as vs -> tgt.observedSeq as vt then string(vs, vt);
  src.quality as vs0 -> tgt.quality as vt0 then quality(vs0, vt0);
  src.readCoverage as vs -> tgt.readCoverage as vt then string(vs, vt);
  src.repository as vs0 -> tgt.repository as vt0 then repository(vs0, vt0);
  src.pointer as vs -> tgt.pointer as vt then string(vs, vt);
}

group referenceSeq(source src, target tgt) extends BackboneElement {
  src.chromosome as vs -> tgt.chromosome as vt then string(vs, vt);
  src.genomeBuild as vs -> tgt.genomeBuild as vt then string(vs, vt);
  src.referenceSeqId as vs -> tgt.referenceSeqId as vt then string(vs, vt);
  src.referenceSeqPointer as vs -> tgt.referenceSeqPointer as vt then string(vs, vt);
  src.referenceSeqString as vs -> tgt.referenceSeqString as vt then string(vs, vt);
  src.strand where value = 'watson' -> tgt.strand = 1;
  src.strand as vvv where value = 'crick' -> tgt.strand = create('') as vvv "1";
  src.windowStart as vs -> tgt.windowStart as vt then string(vs, vt);
  src.windowEnd as vs -> tgt.windowEnd as vt then string(vs, vt);
}

group variant(source src, target tgt) extends BackboneElement {
  src.start as vs -> tgt.start as vt then dateTime(vs, vt);
  src.end as vs -> tgt.end as vt then dateTime(vs, vt);
  src.observedAllele as vs -> tgt.observedAllele as vt then string(vs, vt);
  src.referenceAllele as vs -> tgt.referenceAllele as vt then string(vs, vt);
  src.cigar as vs -> tgt.cigar as vt then string(vs, vt);
  src.variantPointer as vs -> tgt.variantPointer as vt then string(vs, vt);
}

group quality(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.standardSequence as vs -> tgt.standardSequence as vt then string(vs, vt);
  src.start as vs -> tgt.start as vt then dateTime(vs, vt);
  src.end as vs -> tgt.end as vt then dateTime(vs, vt);
  src.score as vs -> tgt.score as vt then string(vs, vt);
  src.method as vs -> tgt.method as vt then CodeableConcept(vs, vt);
  src.truthTP as vs -> tgt.truthTP as vt then string(vs, vt);
  src.queryTP as vs -> tgt.queryTP as vt then string(vs, vt);
  src.truthFN as vs -> tgt.truthFN as vt then string(vs, vt);
  src.queryFP as vs -> tgt.queryFP as vt then string(vs, vt);
  src.gtFP as vs -> tgt.gtFP as vt then string(vs, vt);
  src.precision as vs -> tgt.precision as vt then string(vs, vt);
  src.recall as vs -> tgt.recall as vt then string(vs, vt);
  src.fScore as vs -> tgt.fScore as vt then string(vs, vt);
}

group repository(source src, target tgt) extends BackboneElement {
  src.type as vs -> tgt.type as vt then string(vs, vt);
  src.url as vs -> tgt.url as vt then uri(vs, vt);
  src.name as vs -> tgt.name as vt then string(vs, vt);
  src.datasetId as vs -> tgt.datasetId as vt then string(vs, vt);
  src.variantsetId as vs -> tgt.variantsetId as vt then string(vs, vt);
  src.readsetId as vs -> tgt.readsetId as vt then string(vs, vt);
}

